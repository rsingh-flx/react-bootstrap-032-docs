webpackJsonp([0x6bb6ab01f860],{752:function(e,l){e.exports={data:{ButtonGroup:{composes:null,displayName:"ButtonGroup",description:null,props:[{name:"vertical",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:null,required:!1,type:{name:"bool",value:null,raw:null}},{name:"justified",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:null,required:!1,type:{name:"bool",value:null,raw:null}},{name:"block",doclets:{type:"{bool}",controllable:null},defaultValue:{value:"false",computed:!1},description:{childMarkdownRemark:{html:'<p>Display block buttons; only useful when used with the "vertical" prop.</p>'}},required:!1,type:{name:"bool",value:null,raw:"all(\r\n  PropTypes.bool,\r\n  ({ block, vertical }) =>\r\n    block && !vertical\r\n      ? new Error('`block` requires `vertical` to be set to have any effect')\r\n      : null\r\n)"}},{name:"bsClass",doclets:{type:null,controllable:null},defaultValue:{value:"'btn-group'",computed:null},description:{childMarkdownRemark:{html:"<p>Base CSS class and prefix for the component. Generally one should only change <code>bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},required:!1,type:{name:"string",value:null,raw:null}}]},ButtonToolbar:{composes:null,displayName:"ButtonToolbar",description:null,props:[{name:"bsClass",doclets:{type:null,controllable:null},defaultValue:{value:"'btn-toolbar'",computed:null},description:{childMarkdownRemark:{html:"<p>Base CSS class and prefix for the component. Generally one should only change <code>bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},required:!1,type:{name:"string",value:null,raw:null}}]},ToggleButtonGroup:{composes:null,displayName:"ToggleButtonGroup",description:null,props:[{name:"name",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>An HTML <code>&#x3C;input></code> name for each child button.</p>\n<p><strong>Required if <code>type</code> is set to <code>'radio'</code></strong></p>"}},required:!1,type:{name:"string",value:null,raw:null}},{name:"value",doclets:{type:null,controllable:"onChange"},defaultValue:null,description:{childMarkdownRemark:{html:"<p>The value, or array of values, of the active (pressed) buttons</p>"}},required:!1,type:{name:"any",value:null,raw:null}},{name:"onChange",doclets:{type:null,controllable:"values"},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Callback fired when a button is pressed, depending on whether the <code>type</code>\nis <code>'radio'</code> or <code>'checkbox'</code>, <code>onChange</code> will be called with the value or\narray of active values</p>"}},required:!1,type:{name:"func",value:null,raw:null}},{name:"type",doclets:{type:null,controllable:null},defaultValue:{value:"'radio'",computed:!1},description:{childMarkdownRemark:{html:"<p>The input <code>type</code> of the rendered buttons, determines the toggle behavior\nof the buttons</p>"}},required:!0,type:{name:"enum",value:[{value:"'checkbox'",computed:!1},{value:"'radio'",computed:!1}],raw:null}}]},ToggleButton:{composes:null,displayName:"ToggleButton",description:null,props:[{name:"type",doclets:{type:"{[type]}",controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>The <code>&#x3C;input></code> <code>type</code></p>"}},required:!1,type:{name:"[type]",value:[{value:"'checkbox'",computed:!1},{value:"'radio'",computed:!1}],raw:null}},{name:"name",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>The HTML input name, used to group like checkboxes or radio buttons together\nsemantically</p>"}},required:!1,type:{name:"string",value:null,raw:null}},{name:"checked",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>The checked state of the input, managed by `<ToggleButtonGroup><code></code> automatically</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"disabled",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>The disabled state of both the label and input</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"onChange",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>[onChange description]</p>"}},required:!1,type:{name:"func",value:null,raw:null}},{name:"value",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>The value of the input, and unique identifier in the ToggleButtonGroup</p>"}},required:!0,type:{name:"any",value:null,raw:null}}]}},pathContext:{}}}});
//# sourceMappingURL=path---components-button-group-4f6ea9a44083d6537004.js.map