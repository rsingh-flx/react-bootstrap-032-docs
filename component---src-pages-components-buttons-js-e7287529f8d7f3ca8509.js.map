{"version":3,"sources":["webpack:///component---src-pages-components-buttons-js-e7287529f8d7f3ca8509.js","webpack:///./src/examples/ButtonActive.js","webpack:///./src/examples/ButtonBlock.js","webpack:///./src/examples/ButtonDisabled.js","webpack:///./src/examples/ButtonLoading.js","webpack:///./src/examples/ButtonSizes.js","webpack:///./src/examples/ButtonTagTypes.js","webpack:///./src/examples/ButtonTypes.js","webpack:///./src/pages/components/buttons.js"],"names":["webpackJsonp","391","module","exports","392","393","400","401","402","404","511","__webpack_require__","_interopRequireDefault","obj","__esModule","default","ButtonSection","_ref","data","_react2","createElement","className","_Anchor2","id","_ReactPlayground2","codeText","_ButtonTypes2","_ButtonSizes2","_ButtonBlock2","_ButtonActive2","_ButtonTagTypes2","_ButtonDisabled2","_ButtonLoading2","_LinkToSource2","component","metadata","displayName","_PropTable2","query","undefined","_react","_Anchor","_LinkToSource","_PropTable","_ReactPlayground","_ButtonTypes","_ButtonSizes","_ButtonBlock","_ButtonActive","_ButtonTagTypes","_ButtonDisabled","_ButtonLoading"],"mappings":"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","file":"component---src-pages-components-buttons-js-e7287529f8d7f3ca8509.js","sourcesContent":["webpackJsonp([182111883848774],{\n\n/***/ 391:\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = \"<ButtonToolbar>\\r\\n  <Button bsStyle=\\\"primary\\\" bsSize=\\\"large\\\" active>\\r\\n    Primary button\\r\\n  </Button>\\r\\n  <Button bsSize=\\\"large\\\" active>\\r\\n    Button\\r\\n  </Button>\\r\\n</ButtonToolbar>;\\r\\n\";\n\n/***/ }),\n\n/***/ 392:\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = \"const wellStyles = { maxWidth: 400, margin: '0 auto 10px' };\\r\\n\\r\\nconst buttonsInstance = (\\r\\n  <div className=\\\"well\\\" style={wellStyles}>\\r\\n    <Button bsStyle=\\\"primary\\\" bsSize=\\\"large\\\" block>\\r\\n      Block level button\\r\\n    </Button>\\r\\n    <Button bsSize=\\\"large\\\" block>\\r\\n      Block level button\\r\\n    </Button>\\r\\n  </div>\\r\\n);\\r\\n\\r\\nrender(buttonsInstance);\\r\\n\";\n\n/***/ }),\n\n/***/ 393:\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = \"<ButtonToolbar>\\r\\n  <Button bsStyle=\\\"primary\\\" bsSize=\\\"large\\\" disabled>\\r\\n    Primary button\\r\\n  </Button>\\r\\n  <Button bsSize=\\\"large\\\" disabled>\\r\\n    Button\\r\\n  </Button>\\r\\n</ButtonToolbar>;\\r\\n\";\n\n/***/ }),\n\n/***/ 400:\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = \"class LoadingButton extends React.Component {\\r\\n  constructor(props, context) {\\r\\n    super(props, context);\\r\\n\\r\\n    this.handleClick = this.handleClick.bind(this);\\r\\n\\r\\n    this.state = {\\r\\n      isLoading: false\\r\\n    };\\r\\n  }\\r\\n\\r\\n  handleClick() {\\r\\n    this.setState({ isLoading: true });\\r\\n\\r\\n    // This probably where you would have an `ajax` call\\r\\n    setTimeout(() => {\\r\\n      // Completed of async action, set loading state back\\r\\n      this.setState({ isLoading: false });\\r\\n    }, 2000);\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const { isLoading } = this.state;\\r\\n\\r\\n    return (\\r\\n      <Button\\r\\n        bsStyle=\\\"primary\\\"\\r\\n        disabled={isLoading}\\r\\n        onClick={!isLoading ? this.handleClick : null}\\r\\n      >\\r\\n        {isLoading ? 'Loading...' : 'Loading state'}\\r\\n      </Button>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nrender(<LoadingButton />);\\r\\n\";\n\n/***/ }),\n\n/***/ 401:\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = \"<div>\\r\\n  <ButtonToolbar>\\r\\n    <Button bsStyle=\\\"primary\\\" bsSize=\\\"large\\\">\\r\\n      Large button\\r\\n    </Button>\\r\\n    <Button bsSize=\\\"large\\\">Large button</Button>\\r\\n  </ButtonToolbar>\\r\\n  <ButtonToolbar>\\r\\n    <Button bsStyle=\\\"primary\\\">Default button</Button>\\r\\n    <Button>Default button</Button>\\r\\n  </ButtonToolbar>\\r\\n  <ButtonToolbar>\\r\\n    <Button bsStyle=\\\"primary\\\" bsSize=\\\"small\\\">\\r\\n      Small button\\r\\n    </Button>\\r\\n    <Button bsSize=\\\"small\\\">Small button</Button>\\r\\n  </ButtonToolbar>\\r\\n  <ButtonToolbar>\\r\\n    <Button bsStyle=\\\"primary\\\" bsSize=\\\"xsmall\\\">\\r\\n      Extra small button\\r\\n    </Button>\\r\\n    <Button bsSize=\\\"xsmall\\\">Extra small button</Button>\\r\\n  </ButtonToolbar>\\r\\n</div>;\\r\\n\";\n\n/***/ }),\n\n/***/ 402:\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = \"<ButtonToolbar>\\r\\n  <Button href=\\\"#\\\">Link</Button>\\r\\n  <Button>Button</Button>\\r\\n</ButtonToolbar>;\\r\\n\";\n\n/***/ }),\n\n/***/ 404:\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = \"<ButtonToolbar>\\r\\n  {/* Standard button */}\\r\\n  <Button>Default</Button>\\r\\n\\r\\n  {/* Provides extra visual weight and identifies the primary action in a set of buttons */}\\r\\n  <Button bsStyle=\\\"primary\\\">Primary</Button>\\r\\n\\r\\n  {/* Indicates a successful or positive action */}\\r\\n  <Button bsStyle=\\\"success\\\">Success</Button>\\r\\n\\r\\n  {/* Contextual button for informational alert messages */}\\r\\n  <Button bsStyle=\\\"info\\\">Info</Button>\\r\\n\\r\\n  {/* Indicates caution should be taken with this action */}\\r\\n  <Button bsStyle=\\\"warning\\\">Warning</Button>\\r\\n\\r\\n  {/* Indicates a dangerous or potentially negative action */}\\r\\n  <Button bsStyle=\\\"danger\\\">Danger</Button>\\r\\n\\r\\n  {/* Deemphasize a button by making it look like a link while maintaining button behavior */}\\r\\n  <Button bsStyle=\\\"link\\\">Link</Button>\\r\\n</ButtonToolbar>;\\r\\n\";\n\n/***/ }),\n\n/***/ 511:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.query = undefined;\n\texports.default = ButtonSection;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _Anchor = __webpack_require__(12);\n\t\n\tvar _Anchor2 = _interopRequireDefault(_Anchor);\n\t\n\tvar _LinkToSource = __webpack_require__(17);\n\t\n\tvar _LinkToSource2 = _interopRequireDefault(_LinkToSource);\n\t\n\tvar _PropTable = __webpack_require__(14);\n\t\n\tvar _PropTable2 = _interopRequireDefault(_PropTable);\n\t\n\tvar _ReactPlayground = __webpack_require__(13);\n\t\n\tvar _ReactPlayground2 = _interopRequireDefault(_ReactPlayground);\n\t\n\tvar _ButtonTypes = __webpack_require__(404);\n\t\n\tvar _ButtonTypes2 = _interopRequireDefault(_ButtonTypes);\n\t\n\tvar _ButtonSizes = __webpack_require__(401);\n\t\n\tvar _ButtonSizes2 = _interopRequireDefault(_ButtonSizes);\n\t\n\tvar _ButtonBlock = __webpack_require__(392);\n\t\n\tvar _ButtonBlock2 = _interopRequireDefault(_ButtonBlock);\n\t\n\tvar _ButtonActive = __webpack_require__(391);\n\t\n\tvar _ButtonActive2 = _interopRequireDefault(_ButtonActive);\n\t\n\tvar _ButtonTagTypes = __webpack_require__(402);\n\t\n\tvar _ButtonTagTypes2 = _interopRequireDefault(_ButtonTagTypes);\n\t\n\tvar _ButtonDisabled = __webpack_require__(393);\n\t\n\tvar _ButtonDisabled2 = _interopRequireDefault(_ButtonDisabled);\n\t\n\tvar _ButtonLoading = __webpack_require__(400);\n\t\n\tvar _ButtonLoading2 = _interopRequireDefault(_ButtonLoading);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction ButtonSection(_ref) {\n\t  var data = _ref.data;\n\t\n\t  return _react2.default.createElement(\n\t    'div',\n\t    { className: 'bs-docs-section' },\n\t    _react2.default.createElement(\n\t      'h1',\n\t      { className: 'page-header' },\n\t      _react2.default.createElement(\n\t        _Anchor2.default,\n\t        { id: 'buttons' },\n\t        'Buttons'\n\t      ),\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'small',\n\t        null,\n\t        'Button'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'h3',\n\t      null,\n\t      _react2.default.createElement(\n\t        _Anchor2.default,\n\t        { id: 'buttons-options' },\n\t        'Options'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Use any of the available button style types to quickly create a styled button. Just modify the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'bsStyle'\n\t      ),\n\t      ' prop.'\n\t    ),\n\t    _react2.default.createElement(_ReactPlayground2.default, { codeText: _ButtonTypes2.default }),\n\t    _react2.default.createElement(\n\t      'div',\n\t      { className: 'bs-callout bs-callout-warning' },\n\t      _react2.default.createElement(\n\t        'h4',\n\t        null,\n\t        'Button spacing'\n\t      ),\n\t      _react2.default.createElement(\n\t        'p',\n\t        null,\n\t        'Because React doesn\\'t output newlines between elements, buttons on the same line are displayed flush against each other. To preserve the spacing between multiple inline buttons, wrap your button group in',\n\t        ' ',\n\t        _react2.default.createElement(\n\t          'code',\n\t          null,\n\t          '<ButtonToolbar />'\n\t        ),\n\t        '.'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'h3',\n\t      null,\n\t      _react2.default.createElement(\n\t        _Anchor2.default,\n\t        { id: 'buttons-sizes' },\n\t        'Sizes'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Fancy larger or smaller buttons? Add ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'bsSize=\"large\"'\n\t      ),\n\t      ',',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'bsSize=\"small\"'\n\t      ),\n\t      ', or ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'bsSize=\"xsmall\"'\n\t      ),\n\t      ' for additional sizes.'\n\t    ),\n\t    _react2.default.createElement(_ReactPlayground2.default, { codeText: _ButtonSizes2.default }),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Create block level buttons\\u2014those that span the full width of a parent\\u2014 by adding the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'block'\n\t      ),\n\t      ' prop.'\n\t    ),\n\t    _react2.default.createElement(_ReactPlayground2.default, { codeText: _ButtonBlock2.default }),\n\t    _react2.default.createElement(\n\t      'h3',\n\t      null,\n\t      _react2.default.createElement(\n\t        _Anchor2.default,\n\t        { id: 'buttons-active' },\n\t        'Active state'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'To set a buttons active state simply set the components',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'active'\n\t      ),\n\t      ' prop.'\n\t    ),\n\t    _react2.default.createElement(_ReactPlayground2.default, { codeText: _ButtonActive2.default }),\n\t    _react2.default.createElement(\n\t      'h3',\n\t      null,\n\t      _react2.default.createElement(\n\t        _Anchor2.default,\n\t        { id: 'buttons-tags' },\n\t        'Button tags'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'The DOM element tag is choosen automatically for you based on the props you supply. Passing a ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'href'\n\t      ),\n\t      ' will result in the button using a ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        '<a />'\n\t      ),\n\t      ' element otherwise a ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        '<button />'\n\t      ),\n\t      ' ',\n\t      'element will be used.'\n\t    ),\n\t    _react2.default.createElement(_ReactPlayground2.default, { codeText: _ButtonTagTypes2.default }),\n\t    _react2.default.createElement(\n\t      'h3',\n\t      null,\n\t      _react2.default.createElement(\n\t        _Anchor2.default,\n\t        { id: 'buttons-disabled' },\n\t        'Disabled state'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Make buttons look unclickable by fading them back 50%. To do this add the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'disabled'\n\t      ),\n\t      ' attribute to buttons.'\n\t    ),\n\t    _react2.default.createElement(_ReactPlayground2.default, { codeText: _ButtonDisabled2.default }),\n\t    _react2.default.createElement(\n\t      'div',\n\t      { className: 'bs-callout bs-callout-warning' },\n\t      _react2.default.createElement(\n\t        'h4',\n\t        null,\n\t        'Cross-Browser compatibility'\n\t      ),\n\t      _react2.default.createElement(\n\t        'p',\n\t        null,\n\t        'Because ',\n\t        _react2.default.createElement(\n\t          'code',\n\t          null,\n\t          '<Button />'\n\t        ),\n\t        ' will render an',\n\t        ' ',\n\t        _react2.default.createElement(\n\t          'code',\n\t          null,\n\t          '<a>'\n\t        ),\n\t        ' tag in certain situations. Since anchor tags can\\'t be ',\n\t        _react2.default.createElement(\n\t          'code',\n\t          null,\n\t          'disabled'\n\t        ),\n\t        ', the behavior is emulated as best it can be. Specifically, ',\n\t        _react2.default.createElement(\n\t          'code',\n\t          null,\n\t          'pointer-events: none;'\n\t        ),\n\t        ' style is added to the anchor to prevent focusing, which is only supported in newer browser versions.'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'h3',\n\t      null,\n\t      _react2.default.createElement(\n\t        _Anchor2.default,\n\t        { id: 'buttons-loading' },\n\t        'Button loading state'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'When activating an asynchronous action from a button it is a good UX pattern to give the user feedback as to the loading state, this can easily be done by updating your ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        '<Button />'\n\t      ),\n\t      '\\u2019s props from a state change like below.'\n\t    ),\n\t    _react2.default.createElement(_ReactPlayground2.default, { codeText: _ButtonLoading2.default }),\n\t    _react2.default.createElement(\n\t      'h3',\n\t      null,\n\t      _react2.default.createElement(\n\t        _Anchor2.default,\n\t        { id: 'buttons-props' },\n\t        'Props'\n\t      ),\n\t      _react2.default.createElement(_LinkToSource2.default, { component: data.metadata.displayName })\n\t    ),\n\t    _react2.default.createElement(_PropTable2.default, { metadata: data.metadata })\n\t  );\n\t}\n\t\n\tvar query = exports.query = '** extracted graphql fragment **';\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-components-buttons-js-e7287529f8d7f3ca8509.js","module.exports = \"<ButtonToolbar>\\r\\n  <Button bsStyle=\\\"primary\\\" bsSize=\\\"large\\\" active>\\r\\n    Primary button\\r\\n  </Button>\\r\\n  <Button bsSize=\\\"large\\\" active>\\r\\n    Button\\r\\n  </Button>\\r\\n</ButtonToolbar>;\\r\\n\"\n\n\n// WEBPACK FOOTER //\n// ./src/examples/ButtonActive.js","module.exports = \"const wellStyles = { maxWidth: 400, margin: '0 auto 10px' };\\r\\n\\r\\nconst buttonsInstance = (\\r\\n  <div className=\\\"well\\\" style={wellStyles}>\\r\\n    <Button bsStyle=\\\"primary\\\" bsSize=\\\"large\\\" block>\\r\\n      Block level button\\r\\n    </Button>\\r\\n    <Button bsSize=\\\"large\\\" block>\\r\\n      Block level button\\r\\n    </Button>\\r\\n  </div>\\r\\n);\\r\\n\\r\\nrender(buttonsInstance);\\r\\n\"\n\n\n// WEBPACK FOOTER //\n// ./src/examples/ButtonBlock.js","module.exports = \"<ButtonToolbar>\\r\\n  <Button bsStyle=\\\"primary\\\" bsSize=\\\"large\\\" disabled>\\r\\n    Primary button\\r\\n  </Button>\\r\\n  <Button bsSize=\\\"large\\\" disabled>\\r\\n    Button\\r\\n  </Button>\\r\\n</ButtonToolbar>;\\r\\n\"\n\n\n// WEBPACK FOOTER //\n// ./src/examples/ButtonDisabled.js","module.exports = \"class LoadingButton extends React.Component {\\r\\n  constructor(props, context) {\\r\\n    super(props, context);\\r\\n\\r\\n    this.handleClick = this.handleClick.bind(this);\\r\\n\\r\\n    this.state = {\\r\\n      isLoading: false\\r\\n    };\\r\\n  }\\r\\n\\r\\n  handleClick() {\\r\\n    this.setState({ isLoading: true });\\r\\n\\r\\n    // This probably where you would have an `ajax` call\\r\\n    setTimeout(() => {\\r\\n      // Completed of async action, set loading state back\\r\\n      this.setState({ isLoading: false });\\r\\n    }, 2000);\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const { isLoading } = this.state;\\r\\n\\r\\n    return (\\r\\n      <Button\\r\\n        bsStyle=\\\"primary\\\"\\r\\n        disabled={isLoading}\\r\\n        onClick={!isLoading ? this.handleClick : null}\\r\\n      >\\r\\n        {isLoading ? 'Loading...' : 'Loading state'}\\r\\n      </Button>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nrender(<LoadingButton />);\\r\\n\"\n\n\n// WEBPACK FOOTER //\n// ./src/examples/ButtonLoading.js","module.exports = \"<div>\\r\\n  <ButtonToolbar>\\r\\n    <Button bsStyle=\\\"primary\\\" bsSize=\\\"large\\\">\\r\\n      Large button\\r\\n    </Button>\\r\\n    <Button bsSize=\\\"large\\\">Large button</Button>\\r\\n  </ButtonToolbar>\\r\\n  <ButtonToolbar>\\r\\n    <Button bsStyle=\\\"primary\\\">Default button</Button>\\r\\n    <Button>Default button</Button>\\r\\n  </ButtonToolbar>\\r\\n  <ButtonToolbar>\\r\\n    <Button bsStyle=\\\"primary\\\" bsSize=\\\"small\\\">\\r\\n      Small button\\r\\n    </Button>\\r\\n    <Button bsSize=\\\"small\\\">Small button</Button>\\r\\n  </ButtonToolbar>\\r\\n  <ButtonToolbar>\\r\\n    <Button bsStyle=\\\"primary\\\" bsSize=\\\"xsmall\\\">\\r\\n      Extra small button\\r\\n    </Button>\\r\\n    <Button bsSize=\\\"xsmall\\\">Extra small button</Button>\\r\\n  </ButtonToolbar>\\r\\n</div>;\\r\\n\"\n\n\n// WEBPACK FOOTER //\n// ./src/examples/ButtonSizes.js","module.exports = \"<ButtonToolbar>\\r\\n  <Button href=\\\"#\\\">Link</Button>\\r\\n  <Button>Button</Button>\\r\\n</ButtonToolbar>;\\r\\n\"\n\n\n// WEBPACK FOOTER //\n// ./src/examples/ButtonTagTypes.js","module.exports = \"<ButtonToolbar>\\r\\n  {/* Standard button */}\\r\\n  <Button>Default</Button>\\r\\n\\r\\n  {/* Provides extra visual weight and identifies the primary action in a set of buttons */}\\r\\n  <Button bsStyle=\\\"primary\\\">Primary</Button>\\r\\n\\r\\n  {/* Indicates a successful or positive action */}\\r\\n  <Button bsStyle=\\\"success\\\">Success</Button>\\r\\n\\r\\n  {/* Contextual button for informational alert messages */}\\r\\n  <Button bsStyle=\\\"info\\\">Info</Button>\\r\\n\\r\\n  {/* Indicates caution should be taken with this action */}\\r\\n  <Button bsStyle=\\\"warning\\\">Warning</Button>\\r\\n\\r\\n  {/* Indicates a dangerous or potentially negative action */}\\r\\n  <Button bsStyle=\\\"danger\\\">Danger</Button>\\r\\n\\r\\n  {/* Deemphasize a button by making it look like a link while maintaining button behavior */}\\r\\n  <Button bsStyle=\\\"link\\\">Link</Button>\\r\\n</ButtonToolbar>;\\r\\n\"\n\n\n// WEBPACK FOOTER //\n// ./src/examples/ButtonTypes.js","import React from 'react';\r\n\r\nimport Anchor from '../../components/Anchor';\r\nimport LinkToSource from '../../components/LinkToSource';\r\nimport PropTable from '../../components/PropTable';\r\nimport ReactPlayground from '../../components/ReactPlayground';\r\nimport ButtonTypes from '../../examples/ButtonTypes';\r\nimport ButtonSizes from '../../examples/ButtonSizes';\r\nimport ButtonBlock from '../../examples/ButtonBlock';\r\nimport ButtonActive from '../../examples/ButtonActive';\r\nimport ButtonTagTypes from '../../examples/ButtonTagTypes';\r\nimport ButtonDisabled from '../../examples/ButtonDisabled';\r\nimport ButtonLoading from '../../examples/ButtonLoading';\r\n\r\nexport default function ButtonSection({ data }) {\r\n  return (\r\n    <div className=\"bs-docs-section\">\r\n      <h1 className=\"page-header\">\r\n        <Anchor id=\"buttons\">Buttons</Anchor> <small>Button</small>\r\n      </h1>\r\n\r\n      <h3>\r\n        <Anchor id=\"buttons-options\">Options</Anchor>\r\n      </h3>\r\n      <p>\r\n        Use any of the available button style types to quickly create a styled\r\n        button. Just modify the <code>bsStyle</code> prop.\r\n      </p>\r\n      <ReactPlayground codeText={ButtonTypes} />\r\n\r\n      <div className=\"bs-callout bs-callout-warning\">\r\n        <h4>Button spacing</h4>\r\n        <p>\r\n          Because React doesn't output newlines between elements, buttons on the\r\n          same line are displayed flush against each other. To preserve the\r\n          spacing between multiple inline buttons, wrap your button group in{' '}\r\n          <code>{'<ButtonToolbar />'}</code>.\r\n        </p>\r\n      </div>\r\n\r\n      <h3>\r\n        <Anchor id=\"buttons-sizes\">Sizes</Anchor>\r\n      </h3>\r\n      <p>\r\n        Fancy larger or smaller buttons? Add <code>bsSize=\"large\"</code>,{' '}\r\n        <code>bsSize=\"small\"</code>, or <code>bsSize=\"xsmall\"</code> for\r\n        additional sizes.\r\n      </p>\r\n      <ReactPlayground codeText={ButtonSizes} />\r\n\r\n      <p>\r\n        Create block level buttons—those that span the full width of a parent—\r\n        by adding the <code>block</code> prop.\r\n      </p>\r\n      <ReactPlayground codeText={ButtonBlock} />\r\n\r\n      <h3>\r\n        <Anchor id=\"buttons-active\">Active state</Anchor>\r\n      </h3>\r\n      <p>\r\n        To set a buttons active state simply set the components{' '}\r\n        <code>active</code> prop.\r\n      </p>\r\n      <ReactPlayground codeText={ButtonActive} />\r\n\r\n      <h3>\r\n        <Anchor id=\"buttons-tags\">Button tags</Anchor>\r\n      </h3>\r\n      <p>\r\n        The DOM element tag is choosen automatically for you based on the props\r\n        you supply. Passing a <code>href</code> will result in the button using\r\n        a <code>{'<a />'}</code> element otherwise a <code>{'<button />'}</code>{' '}\r\n        element will be used.\r\n      </p>\r\n      <ReactPlayground codeText={ButtonTagTypes} />\r\n\r\n      <h3>\r\n        <Anchor id=\"buttons-disabled\">Disabled state</Anchor>\r\n      </h3>\r\n      <p>\r\n        Make buttons look unclickable by fading them back 50%. To do this add\r\n        the <code>disabled</code> attribute to buttons.\r\n      </p>\r\n      <ReactPlayground codeText={ButtonDisabled} />\r\n\r\n      <div className=\"bs-callout bs-callout-warning\">\r\n        <h4>Cross-Browser compatibility</h4>\r\n        <p>\r\n          Because <code>{'<Button />'}</code> will render an{' '}\r\n          <code>{'<a>'}</code> tag in certain situations. Since anchor tags\r\n          can't be <code>disabled</code>, the behavior is emulated as best it\r\n          can be. Specifically, <code>pointer-events: none;</code> style is\r\n          added to the anchor to prevent focusing, which is only supported in\r\n          newer browser versions.\r\n        </p>\r\n      </div>\r\n\r\n      <h3>\r\n        <Anchor id=\"buttons-loading\">Button loading state</Anchor>\r\n      </h3>\r\n      <p>\r\n        When activating an asynchronous action from a button it is a good UX\r\n        pattern to give the user feedback as to the loading state, this can\r\n        easily be done by updating your <code>{'<Button />'}</code>&#8217;s\r\n        props from a state change like below.\r\n      </p>\r\n      <ReactPlayground codeText={ButtonLoading} />\r\n\r\n      <h3>\r\n        <Anchor id=\"buttons-props\">Props</Anchor>\r\n        <LinkToSource component={data.metadata.displayName} />\r\n      </h3>\r\n\r\n      <PropTable metadata={data.metadata} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const query = graphql`\r\n  query ButtonQuery {\r\n    metadata: componentMetadata(displayName: { eq: \"Button\" }) {\r\n      ...PropTable_metadata\r\n    }\r\n  }\r\n`;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/components/buttons.js"],"sourceRoot":""}