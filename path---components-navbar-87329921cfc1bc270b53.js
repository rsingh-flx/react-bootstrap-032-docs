webpackJsonp([0xfeb8ff70afd6],{763:function(e,l){e.exports={data:{Navbar:{composes:null,displayName:"Navbar",description:null,props:[{name:"fixedTop",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:{childMarkdownRemark:{html:"<p>Create a fixed navbar along the top of the screen, that scrolls with the\npage</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"fixedBottom",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:{childMarkdownRemark:{html:"<p>Create a fixed navbar along the bottom of the screen, that scrolls with\nthe page</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"staticTop",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:{childMarkdownRemark:{html:"<p>Create a full-width navbar that scrolls away with the page</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"inverse",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:{childMarkdownRemark:{html:"<p>An alternative dark visual style for the Navbar</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"fluid",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:{childMarkdownRemark:{html:"<p>Allow the Navbar to fluidly adjust to the page or container width, instead\nof at the predefined screen breakpoints</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"componentClass",doclets:{type:null,controllable:null},defaultValue:{value:"'nav'",computed:!1},description:{childMarkdownRemark:{html:"<p>Set a custom element for this component.</p>"}},required:!1,type:{name:"custom",value:null,raw:"elementType"}},{name:"onToggle",doclets:{type:null,controllable:"expanded"},defaultValue:null,description:{childMarkdownRemark:{html:"<p>A callback fired when the <code>&#x3C;Navbar></code> body collapses or expands. Fired when\na <code>&#x3C;Navbar.Toggle></code> is clicked and called with the new <code>expanded</code>\nboolean value.</p>"}},required:!1,type:{name:"func",value:null,raw:null}},{name:"onSelect",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:'<p>A callback fired when a descendant of a child <code>&#x3C;Nav></code> is selected. Should\nbe used to execute complex closing or other miscellaneous actions desired\nafter selecting a descendant of <code>&#x3C;Nav></code>. Does nothing if no <code>&#x3C;Nav></code> or <code>&#x3C;Nav></code>\ndescendants exist. The callback is called with an eventKey, which is a\nprop from the selected <code>&#x3C;Nav></code> descendant, and an event.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token punctuation">(</span>\n Any eventKey<span class="token punctuation">,</span>\n SyntheticEvent event<span class="token operator">?</span>\n<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>For basic closing behavior after all <code>&#x3C;Nav></code> descendant onSelect events in\nmobile viewports, try using collapseOnSelect.</p>\n<p>Note: If you are manually closing the navbar using this <code>OnSelect</code> prop,\nensure that you are setting <code>expanded</code> to false and not <em>toggling</em> between\ntrue and false.</p>'}},required:!1,type:{name:"func",value:null,raw:null}},{name:"collapseOnSelect",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:{childMarkdownRemark:{html:"<p>Sets <code>expanded</code> to <code>false</code> after the onSelect event of a descendant of a\nchild <code>&#x3C;Nav></code>. Does nothing if no <code>&#x3C;Nav></code> or <code>&#x3C;Nav></code> descendants exist.</p>\n<p>The onSelect callback should be used instead for more complex operations\nthat need to be executed after the <code>select</code> event of <code>&#x3C;Nav></code> descendants.</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"expanded",doclets:{type:null,controllable:"onToggle"},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Explicitly set the visiblity of the navbar body</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"role",doclets:{type:null,controllable:null},defaultValue:null,description:null,required:!1,type:{name:"string",value:null,raw:null}},{name:"bsStyle",doclets:{type:null,controllable:null},defaultValue:{value:"'default'",computed:null},description:{childMarkdownRemark:{html:"<p>Component visual or contextual style variants.</p>"}},required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"inverse"'}],raw:null}}]},NavbarToggle:{composes:null,displayName:"NavbarToggle",description:null,props:[{name:"onClick",doclets:{type:null,controllable:null},defaultValue:null,description:null,required:!1,type:{name:"func",value:null,raw:null}},{name:"children",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>The toggle content, if left empty it will render the default toggle (seen above).</p>"}},required:!1,type:{name:"node",value:null,raw:null}}]}},pathContext:{}}}});
//# sourceMappingURL=path---components-navbar-87329921cfc1bc270b53.js.map