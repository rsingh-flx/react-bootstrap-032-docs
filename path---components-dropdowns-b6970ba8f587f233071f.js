webpackJsonp([0xcb56081c12f7],{755:function(e,l){e.exports={data:{DropdownButton:{composes:["./Dropdown"],displayName:"DropdownButton",description:null,props:[{name:"bsStyle",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Component visual or contextual style variants.</p>"}},required:!1,type:{name:"string",value:null,raw:null}},{name:"bsSize",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Component size variations.</p>"}},required:!1,type:{name:"string",value:null,raw:null}},{name:"title",doclets:{type:null,controllable:null},defaultValue:null,description:null,required:!0,type:{name:"node",value:null,raw:null}},{name:"noCaret",doclets:{type:null,controllable:null},defaultValue:null,description:null,required:!1,type:{name:"bool",value:null,raw:null}},{name:"children",doclets:{type:null,controllable:null},defaultValue:null,description:null,required:!1,type:{name:"node",value:null,raw:null}}]},SplitButton:{composes:["./Dropdown"],displayName:"SplitButton",description:null,props:[{name:"bsStyle",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Component visual or contextual style variants.</p>"}},required:!1,type:{name:"string",value:null,raw:null}},{name:"bsSize",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Component size variations.</p>"}},required:!1,type:{name:"string",value:null,raw:null}},{name:"href",doclets:{type:null,controllable:null},defaultValue:null,description:null,required:!1,type:{name:"string",value:null,raw:null}},{name:"onClick",doclets:{type:null,controllable:null},defaultValue:null,description:null,required:!1,type:{name:"func",value:null,raw:null}},{name:"title",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>The content of the split button.</p>"}},required:!0,type:{name:"node",value:null,raw:null}},{name:"toggleLabel",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Accessible label for the toggle; the value of <code>title</code> if not specified.</p>"}},required:!1,type:{name:"string",value:null,raw:null}},{name:"children",doclets:{type:null,controllable:null},defaultValue:null,description:null,required:!1,type:{name:"node",value:null,raw:null}}]},Dropdown:{composes:null,displayName:"Dropdown",description:null,props:[{name:"dropup",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>The menu will open above the dropdown button, instead of below it.</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"id",doclets:{type:"{string|number}\r",controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>An html id attribute, necessary for assistive technologies, such as screen readers.</p>"}},required:!0,type:{name:"string|number",value:null,raw:"isRequiredForA11y(\r\n  PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n)"}},{name:"componentClass",doclets:{type:null,controllable:null},defaultValue:{value:"ButtonGroup",computed:!0},description:{childMarkdownRemark:{html:"<p>You can use a custom element type for this component.</p>"}},required:!1,type:{name:"custom",value:null,raw:"elementType"}},{name:"children",doclets:{type:"{node}",controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>The children of a Dropdown may be a <code>&#x3C;Dropdown.Toggle></code> or a <code>&#x3C;Dropdown.Menu></code>.</p>"}},required:!1,type:{name:"node",value:null,raw:"all(\r\n  requiredRoles(TOGGLE_ROLE, MENU_ROLE),\r\n  exclusiveRoles(MENU_ROLE)\r\n)"}},{name:"disabled",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Whether or not component is disabled.</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"pullRight",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Align the menu to the right side of the Dropdown toggle</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"open",doclets:{type:null,controllable:"onToggle"},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Whether or not the Dropdown is visible.</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"defaultOpen",doclets:{type:null,controllable:null},defaultValue:null,description:null,required:!1,type:{name:"bool",value:null,raw:null}},{name:"onToggle",doclets:{type:null,controllable:"open"},defaultValue:null,description:{childMarkdownRemark:{html:'<p>A callback fired when the Dropdown wishes to change visibility. Called with the requested\n<code>open</code> value, the DOM event, and the source that fired it: <code>\'click\'</code>,<code>\'keydown\'</code>,<code>\'rootClose\'</code>, or <code>\'select\'</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span><span class="token punctuation">(</span>Boolean isOpen<span class="token punctuation">,</span> Object event<span class="token punctuation">,</span> <span class="token punctuation">{</span> String source <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre>\n      </div>'}},required:!1,type:{name:"func",value:null,raw:null}},{name:"onSelect",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:'<p>A callback fired when a menu item is selected.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token punctuation">(</span>eventKey<span class="token punctuation">:</span> any<span class="token punctuation">,</span> event<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token operator">=></span> any\n</code></pre>\n      </div>'}},required:!1,type:{name:"func",value:null,raw:null}},{name:"role",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>If <code>'menuitem'</code>, causes the dropdown to behave like a menu item rather than\na menu button.</p>"}},required:!1,type:{name:"string",value:null,raw:null}},{name:"rootCloseEvent",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:'<p>Which event when fired outside the component will cause it to be closed</p>\n<p><em>Note: For custom dropdown components, you will have to pass the\n<code>rootCloseEvent</code> to <code>&#x3C;RootCloseWrapper></code> in your custom dropdown menu\ncomponent (<a href="https://github.com/react-bootstrap/react-bootstrap/blob/v0.31.5/src/DropdownMenu.js#L115-L119">similarly to how it is implemented in <code>&#x3C;Dropdown.Menu></code></a>).</em></p>'}},required:!1,type:{name:"enum",value:[{value:"'click'",computed:!1},{value:"'mousedown'",computed:!1}],raw:null}},{name:"onMouseEnter",doclets:{type:null,controllable:null},defaultValue:null,description:null,required:!1,type:{name:"func",value:null,raw:null}},{name:"onMouseLeave",doclets:{type:null,controllable:null},defaultValue:null,description:null,required:!1,type:{name:"func",value:null,raw:null}}]},MenuItem:{composes:null,displayName:"MenuItem",description:null,props:[{name:"active",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Highlight the menu item as active.</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"disabled",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:{childMarkdownRemark:{html:"<p>Disable the menu item, making it unselectable.</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"divider",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:{childMarkdownRemark:{html:"<p>Styles the menu item as a horizontal rule, providing visual separation between\ngroups of menu items.</p>"}},required:!1,type:{name:"custom",value:null,raw:"all(\r\n  PropTypes.bool,\r\n  ({ divider, children }) =>\r\n    divider && children\r\n      ? new Error('Children will not be rendered for dividers')\r\n      : null\r\n)"}},{name:"eventKey",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Value passed to the <code>onSelect</code> handler, useful for identifying the selected menu item.</p>"}},required:!1,type:{name:"any",value:null,raw:null}},{name:"header",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:{childMarkdownRemark:{html:"<p>Styles the menu item as a header label, useful for describing a group of menu items.</p>"}},required:!1,type:{name:"bool",value:null,raw:null}},{name:"href",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>HTML <code>href</code> attribute corresponding to <code>a.href</code>.</p>"}},required:!1,type:{name:"string",value:null,raw:null}},{name:"onClick",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Callback fired when the menu item is clicked.</p>"}},required:!1,type:{name:"func",value:null,raw:null}},{name:"onSelect",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:'<p>Callback fired when the menu item is selected.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token punctuation">(</span>eventKey<span class="token punctuation">:</span> any<span class="token punctuation">,</span> event<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token operator">=></span> any\n</code></pre>\n      </div>'}},required:!1,type:{name:"func",value:null,raw:null}},{name:"bsClass",doclets:{type:null,controllable:null},defaultValue:{value:"'dropdown'",computed:null},description:{childMarkdownRemark:{html:"<p>Base CSS class and prefix for the component. Generally one should only change <code>bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},required:!1,type:{name:"string",value:null,raw:null}}]}},pathContext:{}}}});
//# sourceMappingURL=path---components-dropdowns-b6970ba8f587f233071f.js.map