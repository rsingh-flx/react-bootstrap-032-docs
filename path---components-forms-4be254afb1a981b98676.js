webpackJsonp([0x7865a61c9e4b],{756:function(l,e){l.exports={data:{FormControlStatic:{composes:null,displayName:"FormControlStatic",description:null,props:[{name:"componentClass",doclets:{type:null,controllable:null},defaultValue:{value:"'p'",computed:!1},description:{childMarkdownRemark:{html:"<p>You can use a custom element type for this component.</p>"}},required:!1,type:{name:"custom",value:null,raw:"elementType"}},{name:"bsClass",doclets:{type:null,controllable:null},defaultValue:{value:"'form-control-static'",computed:null},description:{childMarkdownRemark:{html:"<p>Base CSS class and prefix for the component. Generally one should only change <code>bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},required:!1,type:{name:"string",value:null,raw:null}}]},Form:{composes:null,displayName:"Form",description:null,props:[{name:"horizontal",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:null,required:!1,type:{name:"bool",value:null,raw:null}},{name:"inline",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:null,required:!1,type:{name:"bool",value:null,raw:null}},{name:"componentClass",doclets:{type:null,controllable:null},defaultValue:{value:"'form'",computed:!1},description:{childMarkdownRemark:{html:"<p>You can use a custom element type for this component.</p>"}},required:!1,type:{name:"custom",value:null,raw:"elementType"}},{name:"bsClass",doclets:{type:null,controllable:null},defaultValue:{value:"'form'",computed:null},description:{childMarkdownRemark:{html:"<p>Base CSS class and prefix for the component. Generally one should only change <code>bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},required:!1,type:{name:"string",value:null,raw:null}}]},FormControl:{composes:null,displayName:"FormControl",description:null,props:[{name:"componentClass",doclets:{type:null,controllable:null},defaultValue:{value:"'input'",computed:!1},description:{childMarkdownRemark:{html:"<p>You can use a custom element type for this component.</p>"}},required:!1,type:{name:"custom",value:null,raw:"elementType"}},{name:"type",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Only relevant if <code>componentClass</code> is <code>'input'</code>.</p>"}},required:!1,type:{name:"string",value:null,raw:null}},{name:"id",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Uses <code>controlId</code> from <code>&#x3C;FormGroup></code> if not explicitly specified.</p>"}},required:!1,type:{name:"string",value:null,raw:null}},{name:"inputRef",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:'<p>Attaches a ref to the <code>&#x3C;input></code> element. Only functions can be used here.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token operator">&lt;</span>FormControl inputRef<span class="token operator">=</span><span class="token punctuation">{</span>ref <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> ref<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n</code></pre>\n      </div>'}},required:!1,type:{name:"func",value:null,raw:null}},{name:"bsSize",doclets:{type:null,controllable:null},defaultValue:{value:null,computed:null},description:{childMarkdownRemark:{html:"<p>Component size variations.</p>"}},required:!1,type:{name:"enum",value:[{value:'"sm"'},{value:'"small"'},{value:'"lg"'},{value:'"large"'}],raw:null}},{name:"bsClass",doclets:{type:null,controllable:null},defaultValue:{value:"'form-control'",computed:null},description:{childMarkdownRemark:{html:"<p>Base CSS class and prefix for the component. Generally one should only change <code>bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},required:!1,type:{name:"string",value:null,raw:null}}]},ControlLabel:{composes:null,displayName:"ControlLabel",description:null,props:[{name:"htmlFor",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Uses <code>controlId</code> from <code>&#x3C;FormGroup></code> if not explicitly specified.</p>"}},required:!1,type:{name:"string",value:null,raw:null}},{name:"srOnly",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:null,required:!1,type:{name:"bool",value:null,raw:null}},{name:"bsClass",doclets:{type:null,controllable:null},defaultValue:{value:"'control-label'",computed:null},description:{childMarkdownRemark:{html:"<p>Base CSS class and prefix for the component. Generally one should only change <code>bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},required:!1,type:{name:"string",value:null,raw:null}}]},Checkbox:{composes:null,displayName:"Checkbox",description:null,props:[{name:"inline",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:null,required:!1,type:{name:"bool",value:null,raw:null}},{name:"disabled",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:null,required:!1,type:{name:"bool",value:null,raw:null}},{name:"title",doclets:{type:null,controllable:null},defaultValue:{value:"''",computed:!1},description:null,required:!1,type:{name:"string",value:null,raw:null}},{name:"validationState",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Only valid if <code>inline</code> is not set.</p>"}},required:!1,type:{name:"enum",value:[{value:"'success'",computed:!1},{value:"'warning'",computed:!1},{value:"'error'",computed:!1},{value:"null",computed:!1}],raw:null}},{name:"inputRef",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:'<p>Attaches a ref to the <code>&#x3C;input></code> element. Only functions can be used here.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token operator">&lt;</span>Checkbox inputRef<span class="token operator">=</span><span class="token punctuation">{</span>ref <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> ref<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n</code></pre>\n      </div>'}},required:!1,type:{name:"func",value:null,raw:null}},{name:"bsClass",doclets:{type:null,controllable:null},defaultValue:{value:"'checkbox'",computed:null},description:{childMarkdownRemark:{html:"<p>Base CSS class and prefix for the component. Generally one should only change <code>bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},required:!1,type:{name:"string",value:null,raw:null}}]},Radio:{composes:null,displayName:"Radio",description:null,props:[{name:"inline",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:null,required:!1,type:{name:"bool",value:null,raw:null}},{name:"disabled",doclets:{type:null,controllable:null},defaultValue:{value:"false",computed:!1},description:null,required:!1,type:{name:"bool",value:null,raw:null}},{name:"title",doclets:{type:null,controllable:null},defaultValue:{value:"''",computed:!1},description:null,required:!1,type:{name:"string",value:null,raw:null}},{name:"validationState",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Only valid if <code>inline</code> is not set.</p>"}},required:!1,type:{name:"enum",value:[{value:"'success'",computed:!1},{value:"'warning'",computed:!1},{value:"'error'",computed:!1},{value:"null",computed:!1}],raw:null}},{name:"inputRef",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:'<p>Attaches a ref to the <code>&#x3C;input></code> element. Only functions can be used here.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token operator">&lt;</span>Radio inputRef<span class="token operator">=</span><span class="token punctuation">{</span>ref <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> ref<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n</code></pre>\n      </div>'}},required:!1,type:{name:"func",value:null,raw:null}},{name:"bsClass",doclets:{type:null,controllable:null},defaultValue:{value:"'radio'",computed:null},description:{childMarkdownRemark:{html:"<p>Base CSS class and prefix for the component. Generally one should only change <code>bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},required:!1,type:{name:"string",value:null,raw:null}}]},FormGroup:{composes:null,displayName:"FormGroup",description:null,props:[{name:"controlId",doclets:{type:null,controllable:null},defaultValue:null,description:{childMarkdownRemark:{html:"<p>Sets <code>id</code> on <code>&#x3C;FormControl></code> and <code>htmlFor</code> on <code>&#x3C;FormGroup.Label></code>.</p>"}},required:!1,type:{name:"string",value:null,raw:null}},{name:"validationState",doclets:{type:null,controllable:null},defaultValue:null,description:null,required:!1,type:{name:"enum",value:[{value:"'success'",computed:!1},{value:"'warning'",computed:!1},{value:"'error'",computed:!1},{value:"null",computed:!1}],raw:null}},{name:"bsSize",doclets:{type:null,controllable:null},defaultValue:{value:null,computed:null},description:{childMarkdownRemark:{html:"<p>Component size variations.</p>"}},required:!1,type:{name:"enum",value:[{value:'"lg"'},{value:'"large"'},{value:'"sm"'},{value:'"small"'}],raw:null}},{name:"bsClass",doclets:{type:null,controllable:null},defaultValue:{value:"'form-group'",computed:null},description:{childMarkdownRemark:{html:"<p>Base CSS class and prefix for the component. Generally one should only change <code>bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},required:!1,type:{name:"string",value:null,raw:null}}]},HelpBlock:{composes:null,displayName:"HelpBlock",description:null,props:[{name:"bsClass",doclets:{type:null,controllable:null},defaultValue:{value:"'help-block'",computed:null},description:{childMarkdownRemark:{html:"<p>Base CSS class and prefix for the component. Generally one should only change <code>bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},required:!1,type:{name:"string",value:null,raw:null}}]},InputGroup:{composes:null,displayName:"InputGroup",description:null,props:[{name:"bsSize",doclets:{type:null,controllable:null},defaultValue:{value:null,computed:null},description:{childMarkdownRemark:{html:"<p>Component size variations.</p>"}},required:!1,type:{name:"enum",value:[{value:'"lg"'},{value:'"large"'},{value:'"sm"'},{value:'"small"'}],raw:null}},{name:"bsClass",doclets:{type:null,controllable:null},defaultValue:{value:"'input-group'",computed:null},description:{childMarkdownRemark:{html:"<p>Base CSS class and prefix for the component. Generally one should only change <code>bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},required:!1,type:{name:"string",value:null,raw:null}}]},InputGroupAddon:{composes:null,displayName:"InputGroupAddon",description:null,props:[{name:"bsClass",doclets:{type:null,controllable:null},defaultValue:{value:"'input-group-addon'",computed:null},description:{childMarkdownRemark:{html:"<p>Base CSS class and prefix for the component. Generally one should only change <code>bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},required:!1,type:{name:"string",value:null,raw:null}}]},InputGroupButton:{composes:null,displayName:"InputGroupButton",description:null,props:[{name:"bsClass",doclets:{type:null,controllable:null},defaultValue:{value:"'input-group-btn'",computed:null},description:{childMarkdownRemark:{html:"<p>Base CSS class and prefix for the component. Generally one should only change <code>bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},required:!1,type:{name:"string",value:null,raw:null}}]},FormControlFeedback:{composes:null,displayName:"FormControlFeedback",description:null,props:[{name:"bsRole",doclets:{type:null,controllable:null},defaultValue:{value:"'feedback'",computed:!1},description:null,required:!1,type:null},{name:"bsClass",doclets:{type:null,controllable:null},defaultValue:{value:"'form-control-feedback'",computed:null},description:{childMarkdownRemark:{html:"<p>Base CSS class and prefix for the component. Generally one should only change <code>bsClass</code> to provide new, non-Bootstrap, CSS styles for a component.</p>"}},required:!1,type:{name:"string",value:null,raw:null}}]}},pathContext:{}}}});
//# sourceMappingURL=path---components-forms-4be254afb1a981b98676.js.map